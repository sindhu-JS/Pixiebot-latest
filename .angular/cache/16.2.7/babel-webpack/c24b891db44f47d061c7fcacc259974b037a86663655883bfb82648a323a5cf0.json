{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass OrderByPipe {\n  transform(array, val = 'desc') {\n    if (!val || val.trim() == \"\") {\n      return array;\n    }\n    //ascending\n    if (val == 'asc') {\n      return Array.from(array).sort((item1, item2) => {\n        return this.orderByComparator(item1['id'], item2['id']);\n      });\n    } else if (val == 'desc') {\n      // desc\n      return Array.from(array).sort((item1, item2) => {\n        return this.orderByComparator(item2['id'], item1['id']);\n      });\n    } else if (val == 'a-z') {\n      // a-z\n      return Array.from(array).sort((a, b) => {\n        if (a['name'] < b['name']) {\n          return -1;\n        } else if (a['name'] > b['name']) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    } else if (val == 'z-a') {\n      // z-a\n      return Array.from(array).sort((a, b) => {\n        if (a['name'] > b['name']) {\n          return -1;\n        } else if (a['name'] < b['name']) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    } else if (val == 'low') {\n      // low to high\n      return Array.from(array).sort((a, b) => {\n        if (a['price'] < b['price']) {\n          return -1;\n        } else if (a['price'] > b['price']) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    } else if (val == 'high') {\n      // high to low\n      return Array.from(array).sort((a, b) => {\n        if (a['price'] > b['price']) {\n          return -1;\n        } else if (a['price'] < b['price']) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n  }\n  orderByComparator(a, b) {\n    if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n      //Isn't a number so lowercase the string to properly compare\n      if (a.toLowerCase() < b.toLowerCase()) return -1;\n      if (a.toLowerCase() > b.toLowerCase()) return 1;\n    } else {\n      //Parse strings as numbers to compare properly\n      if (parseFloat(a) < parseFloat(b)) return -1;\n      if (parseFloat(a) > parseFloat(b)) return 1;\n    }\n    return 0; //equal each other\n  }\n  static #_ = this.ɵfac = function OrderByPipe_Factory(t) {\n    return new (t || OrderByPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"orderBy\",\n    type: OrderByPipe,\n    pure: true\n  });\n}\nexport { OrderByPipe };","map":{"version":3,"names":["OrderByPipe","transform","array","val","trim","Array","from","sort","item1","item2","orderByComparator","a","b","isNaN","parseFloat","isFinite","toLowerCase","_","_2","pure"],"sources":["/Users/sindhujayaraman/Documents/GitHub/Pixiebot-latest/src/app/shared/pipes/order-by.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'orderBy'\n})\nexport class OrderByPipe implements PipeTransform {\n\n transform(array, val = 'desc'){\n     \n     if (!val || val.trim() == \"\"){\n       return array;\n     } \n\n     //ascending\n     if (val == 'asc'){\n       return Array.from(array).sort((item1: any, item2: any) => { \n         return this.orderByComparator(item1['id'], item2['id']);\n       });\n     } else if(val == 'desc'){ // desc\n       return Array.from(array).sort((item1: any, item2: any) => { \n         return this.orderByComparator(item2['id'], item1['id']);\n       });\n     } else if(val == 'a-z') { // a-z\n       return Array.from(array).sort((a: any, b: any) => { \n         if ( a['name'] < b['name'] ){\n          return -1;\n        } else if ( a['name'] > b['name'] ){\n            return 1;\n        } else {\n          return 0;  \n        }\n       });\n     } else if(val == 'z-a') { // z-a\n       return Array.from(array).sort((a: any, b: any) => { \n         if ( a['name'] > b['name'] ){\n          return -1;\n        } else if ( a['name'] < b['name'] ){\n          return 1;\n        } else {\n          return 0;  \n        }\n       });\n    } else if(val == 'low') { // low to high\n       return Array.from(array).sort((a: any, b: any) => { \n         if ( a['price'] < b['price'] ){\n          return -1;\n        } else if ( a['price'] > b['price'] ){\n            return 1;\n        } else {\n          return 0;  \n        }\n       });\n    } else if(val == 'high') { // high to low\n       return Array.from(array).sort((a: any, b: any) => { \n         if ( a['price'] > b['price'] ){\n          return -1;\n        } else if ( a['price'] < b['price'] ){\n          return 1;\n        } else {\n          return 0;  \n        }\n       });\n     }\n\n }\n\n orderByComparator(a:any, b:any):number{\n\n     if((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))){\n       //Isn't a number so lowercase the string to properly compare\n       if(a.toLowerCase() < b.toLowerCase()) return -1;\n       if(a.toLowerCase() > b.toLowerCase()) return 1;\n     }\n     else{\n       //Parse strings as numbers to compare properly\n       if(parseFloat(a) < parseFloat(b)) return -1;\n       if(parseFloat(a) > parseFloat(b)) return 1;\n      }\n\n     return 0; //equal each other\n }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}